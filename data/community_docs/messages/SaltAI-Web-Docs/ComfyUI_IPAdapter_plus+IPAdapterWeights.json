[
    {
        "question": "What is the class name of the node that manages weights in the IPAdapter framework?",
        "answer": "The class name is `IPAdapterWeights`."
    },
    {
        "question": "What is the category of the IPAdapterWeights node?",
        "answer": "The category of the IPAdapterWeights node is `ipadapter/weights`."
    },
    {
        "question": "What does the `weights` input in IPAdapterWeights represent?",
        "answer": "The `weights` input represents a string of comma or newline-separated values for weights to be applied, which can be adjusted by the strategy."
    },
    {
        "question": "What is the purpose of the `timing` input in the context of IPAdapterWeights?",
        "answer": "The `timing` input defines the strategy for applying weights, offering various options like `custom`, `linear`, `ease_in_out`, etc."
    },
    {
        "question": "How are weights manipulated when using the optional `image` input in IPAdapterWeights?",
        "answer": "The optional `image` input allows for image-based adjustments to weights, enhancing the flexibility of the weight strategy."
    },
    {
        "question": "What type of outputs does the IPAdapterWeights node generate?",
        "answer": "The IPAdapterWeights node outputs adjusted weights `weights`, inverted weights `weights_invert`, total number of frames `total_frames`, paired images `image_1` and `image_2`, and the comprehensive weight strategy `weights_strategy`."
    },
    {
        "question": "What does the `method` input parameterize in IPAdapterWeights?",
        "answer": "The `method` input parameterizes the method of applying weights across frames, such as `full batch`, `shift batches`, or `alternate batches`."
    }
]