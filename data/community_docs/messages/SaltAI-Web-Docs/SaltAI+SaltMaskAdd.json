[
    {
        "question": "What is the purpose of the SaltMaskAdd node in ComfyUI?",
        "answer": "The SaltMaskAdd node is designed to perform element-wise addition of two mask tensors, applying a clamp operation to ensure the resulting values fall within a specified range."
    },
    {
        "question": "What category does the SaltMaskAdd node belong to in ComfyUI?",
        "answer": "SaltMaskAdd node belongs to the category `SALT/Masking/Filter` in ComfyUI."
    },
    {
        "question": "What are the required input types for the SaltMaskAdd node?",
        "answer": "The two required input types for the SaltMaskAdd node are `masks_a` and `masks_b`, both of type `MASK` in Comfy dtype, and both have a Python dtype of `torch.Tensor`."
    },
    {
        "question": "Which nodes are considered common in relation to SaltMaskAdd?",
        "answer": "It's not specified which nodes are considered common in relation to SaltMaskAdd."
    },
    {
        "question": "What does the `masks_a` input represent in SaltMaskAdd?",
        "answer": "`masks_a` is the first set of mask tensors to be added. These masks are one of the primary inputs for the addition operation, contributing to the resultant composite mask."
    },
    {
        "question": "How does the SaltMaskAdd node process the `masks_a` and `masks_b` inputs?",
        "answer": "The SaltMaskAdd node processes the `masks_a` and `masks_b` inputs by adding them together element-wise and then clamping the resulting values to ensure they fall within a specified range."
    },
    {
        "question": "What does the SaltMaskAdd node output?",
        "answer": "The SaltMaskAdd node outputs a single value, `MASKS`, which is the composite mask created by adding the input masks together, with values clamped to ensure they remain within a valid range. The output dtype in Comfy is `MASK` and in Python it is `torch.Tensor`."
    }
]