[
    {
        "question": "Separate Mask Components 是什么类？",
        "answer": "Separate Mask Components 是一个属于 Masquerade Nodes 类别的类，用于将单个掩码分解成其连续的组成部分。"
    },
    {
        "question": "Separate Mask Components 的输入是什么类型，它们的用途是什么？",
        "answer": "它的关键参数是掩码（mask），输入的掩码代表了要从中分离出连续组件的初始数据。这直接影响节点的操作和结果分段。掩码的 Comfy 数据类型为 IMAGE，Python 数据类型为 torch.Tensor。"
    },
    {
        "question": "Separate Mask Components 的输出包括哪些，它们有什么意义？",
        "answer": "输出包括一系列分离的掩码（'IMAGE'）和 mask_mappings（'MASK_MAPPING'），前者对应识别出的独立连续组件，后者将这些组件与原始批次中的位置相联系，确保了数据处理流程中的关系完整性。"
    },
    {
        "question": "处理掩码组件的主要过程是什么？",
        "answer": "SeparateMaskComponents 类将掩码通过形态学操作分解，辨识出的独特连续段将生成独立的掩码，同时创建映射以保持原始批次关系的完整性。"
    },
    {
        "question": "哪些操作可以在处理流程中利用 mask_mappings 信息？",
        "answer": "mask_mappings 输出在下游流程中可用于将各个分离的掩码与它们在原始批次中的位置关联，辅助批次处理中的数据绑定，特别是在处理分离的掩码时需要考虑批次位置关系的场景。"
    },
    {
        "question": "Separate Mask Components 类的 infra type 和 core logic 是什么？",
        "answer": "它的 infra type 指明了使用环境是 CPU。核心逻辑在于对输入 mask 的处理，利用 torch 函数进行形态学操作以分离连续组件并生成映射。"
    },
    {
        "question": "如何将 Separate Mask Components 的输出用于进阶处理？",
        "answer": "通过使用分离的掩码和 mask_mappings 信息，可以进一步分析或处理掩码数据，尤其是在按批次处理图像识别或处理的流程中，这有助于保持数据的关联性和批次处理的效率。"
    }
]