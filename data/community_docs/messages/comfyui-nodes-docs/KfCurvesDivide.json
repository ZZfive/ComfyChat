[
    {
        "question": "KfCurvesDivide节点的主要功能是什么？",
        "answer": "KfCurvesDivide节点的主要功能是执行两条曲线的除法操作，提供两种曲线之间关系的分析手段，这对于需要曲线数据标准化或比较的操作至关重要。"
    },
    {
        "question": "KfCurvesDivide节点的输入类型有哪些？",
        "answer": "KfCurvesDivide节点的输入类型包括：curve_1（第一条曲线）和curve_2（第二条曲线），两者都要求是KEYFRAMED_CURVE类型，以支持关键帧操作。"
    },
    {
        "question": "curve_1和curve_2在KfCurvesDivide节点中的作用是什么？",
        "answer": "curve_1作为除法操作的被除数，其值直接影响结果曲线的形状和特征；curve_2作为除数，影响结果曲线相对于第一条曲线的缩放。"
    },
    {
        "question": "KfCurvesDivide节点的输出是什么？",
        "answer": "KfCurvesDivide节点的输出是一种KEYFRAMED_CURVE类型的结果曲线，表示第一条输入曲线除以第二条曲线的计算结果，蕴含两条原始曲线之间的归一化关系。"
    },
    {
        "question": "KfCurvesDivide节点适用于哪种处理器类型？",
        "answer": "KfCurvesDivide节点的Infra type为CPU，意味着它适用于运行在中央处理器上的操作。"
    },
    {
        "question": "如何使用Python创建KfCurvesDivide类实例并执行除法操作？",
        "answer": "使用Python可以通过以下方式创建KfCurvesDivide类实例并执行除法操作：实例化类，然后调用main方法，输入为curve_1和curve_2，这些曲线需要先进行深拷贝，最后通过除法运算符获得结果曲线。"
    },
    {
        "question": "哪些应用场景会需要使用KfCurvesDivide节点进行曲线处理？",
        "answer": "KfCurvesDivide节点适用于需要曲线数据标准化或两个曲线之间关系比较的场景，如动画中速度曲线的标准化处理，或是控制曲线上不同部分的相对强度。"
    }
]