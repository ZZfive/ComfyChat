[
    {
        "question": "How do I install Detectron2 from source?",
        "answer": "To install Detectron2 from source, you need to follow these steps:\n\n1. Ensure you have the necessary dependencies:\n   - Python ≥ 3.6\n   - PyTorch ≥ 1.4\n   - torchvision\n   - OpenCV\n   - pycocotools\n\n2. Clone the Detectron2 repository:\n   `git clone https://github.com/facebookresearch/detectron2.git`\n\n3. Navigate to the Detectron2 directory and install it:\n   `python -m pip install -e .`\n\nIf you are on macOS, you can use:\n   `CC=clang CXX=clang++ python -m pip install -e .`\n\nIf you encounter issues or any errors, you can find solutions and solutions in the following sections:\n\n- [Undefined torch/aten/caffe2 symbols](https://github.com/facebookresearch/detectron2/blob/main/README.md#undefined-torchatencaffe2-symbols-or-segmentation-fault-immediately-when-running-library): Ensure that the versions of Detectron2, torchvision, and PyTorch match.\n- [Undefined C++ symbols (e.g., GLIBCXX)](https://github.com/facebookresearch/detectron2/blob/main/README.md#undefined-c-symbols-eg-glibcxx-or-c-symbols-not-found): Try `conda update libgcc`. If the library was compiled with a newer C++ compiler, run the code with the proper C++ runtime.\n- [\"Not compiled with GPU support\" or \"Detectron2 CUDA Compiler: not available\"](https://github.com/facebookresearch/detectron2/blob/main/README.md#not-compiled-with-gpu-support-or-detectron2-cuda-compiler-not-available): Ensure that CUDA libraries are found.\n- [\"invalid device function\" or \"no kernel image is available for execution\"](https://github.com/facebookresearch/detectron2/blob/main/README.md#invalid-device-function-or-no-kernel-image-is-available-for-execution): Ensure that you are using the correct versions of CUDA and PyTorch.\n- [Undefined CUDA symbols](https://github.com/facebookresearch/detectron2/blob/main/README.md#undefined-cuda-symbols): Ensure the versions of NVIDIA CUDA, NVCC, and CUDA runtime match.\n- [\"ImportError: cannot import name '_C'\"](https://github.com/facebookresearch/detectron2/blob/main/README.md#importerror-cannot-import-name-c): Make sure to import the installed code.\n- [ONNX conversion segfault after some \"TraceWarning\"](https://github.com/facebookresearch/detectron2/blob/main/README.md#onnx-conversion-segfault-after-some-tracewarning): Ensure that the ONNX package is compiled with a more recent compiler."
    },
    {
        "question": "What are the requirements for installing Detectron2 from source?",
        "answer": "To install Detectron2 from source, you need to meet the following requirements:\n\n- Python ≥ 3.6\n- PyTorch ≥ 1.4\n- torchvision \n- OpenCV\n- pycocotools\n\nYou can see the complete list of requirements in the [Detectron2 README](https://github.com/facebookresearch/detectron2/blob/main/README.md) document."
    },
    {
        "question": "How can I resolve issues with Detectron2 installation?",
        "answer": "If you encounter issues during the installation of Detectron2, you can find solutions in the following sections:\n\n1. [Undefined torch/aten/caffe2 symbols](https://github.com/facebookresearch/detectron2/blob/main/README.md#undefined-torchatencaffe2-symbols-or-segmentation-fault-immediately-when-running-library): Ensure that the versions of Detectron2, torchvision, and PyTorch match.\n2. [Undefined C++ symbols (e.g., GLIBCXX)](https://github.com/facebookresearch/detectron2/blob/main/README.md#undefined-c-symbols-eg-glibcxx-or-c-symbols-not-found): Try `conda update libgcc`. If the library was compiled with a newer C++ compiler, run the code with the proper C++ runtime.\n3. [\"Not compiled with GPU support\" or \"Detectron2 CUDA Compiler: not available\"](https://github.com/facebookresearch/detectron2/blob/main/README.md#not-compiled-with-gpu-support-or-detectron2-cuda-compiler-not-available): Ensure that CUDA libraries are found.\n4. [\"invalid device function\" or \"no kernel image is available for execution\"](https://github.com/facebookresearch/detectron2/blob/main/README.md#invalid-device-function-or-no-kernel-image-is-available-for-execution): Ensure that you are using the correct versions of CUDA and PyTorch.\n5. [Undefined CUDA symbols](https://github.com/facebookresearch/detectron2/blob/main/README.md#undefined-cuda-symbols): Ensure the versions of NVIDIA CUDA, NVCC, and CUDA runtime match.\n6. [\"ImportError: cannot import name '_C'\"](https://github.com/facebookresearch/detectron2/blob/main/README.md#importerror-cannot-import-name-c): Make sure to import the installed code.\n7. [ONNX conversion segfault after some \"TraceWarning\"](https://github.com/facebookresearch/detectron2/blob/main/README.md#onnx-conversion-segfault-after-some-tracewarning): Ensure that the ONNX package is compiled with a more recent compiler."
    },
    {
        "question": "How do I troubleshootDetectron2 installation issues?",
        "answer": "If you encounter difficulties during the installation of Detectron2, you can troubleshoot using the following steps:\n\n1. **Check for Version Mismatches:** Ensure that the versions of Python, PyTorch, torchvision, and detectron2 are compatible. You can verify this by checking the output of `python -c 'import torch; from torch.utils.cpp_extension import CUDA_HOME; print(torch.cuda.is_available(), CUDA_HOME)'`.\n   - If using Python 3.6 or higher, ensure that torchvision and detectron2 are installed accordingly with the correct CUDA package.\n   - If using Python 3.7 or later, torchvision and detectron2 need to be compiled with CUDA 11.7 or later to use the new DistributedDataParallel autograd functions.\n2. **Ensure CUDA Libraries Are Found:** Make sure that CUDA libraries are correctly installed and found during the build process. You can check this by logging the version of your CUDA such as:\n   - **GPU Compatibility:** Set the `TORCH_CUDA_ARCH_LIST` environment variable during compilation. For example, `export TORCH_CUDA_ARCH_LIST=6.0,7.0` makes it compile for both P100s and V100s.\n   - **Separate CUDA Runtimes:** Use separate CUDA runtimes if needed, and check if all required dependencies are under version control and accessible by detectron2.\n   - **Dependencies:** Ensure that all necessary dependencies such as pycocotools are installed.\n3. **Check for ONNX Compatibility:** If you encounter issues with ONNX conversion, make sure that you're using a recent compiler, which should be closer to the version used by PyTorch.\n4. **Compile FROM Source:** Always try to compile detectron2 from source, as issues like undefined symbols or segmentation faults often occur due to mismatches in dependencies or Python versions.\n5. **Google and Document Search:** If the issue still persists, utilize resources like the detectron2 GitHub page or the torchvision documentation to troubleshoot the specific errors you encounter."
    },
    {
        "question": "What are the steps involved in installing Detectron2 from source?",
        "answer": "Here are the steps to install Detectron2 from source:\n\n1. Ensure that you have all the necessary dependencies installed:\n   - Linux or macOS with Python >= 3.6\n   - PyTorch >= 1.4\n   - [torchvision](https://github.com/pytorch/vision/) that matches the PyTorch installation\n   - OpenCV, optional, needed for demo and visualization\n   - pycocotools: `pip install cython; pip install -U 'git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI'`\n\n2. Clone the Detectron2 repository:\n   ```bash\n   git clone https://github.com/facebookresearch/detectron2.git\n   ```\n\n3. Navigate to the Detectron2 directory:\n   ```bash\n   cd detectron2\n   ```\n\n4. Install Detectron2 using pip:\n   ```bash\n   python -m pip install detectron2\n   ```\n\n5. If you are on macOS, use the following command:\n   ```bash\n   CC=clang CXX=clang++ python -m pip install detectron2\n   ```\n\n6. If rebuilding Detectron2 from a local clone, use:\n   ```bash\n   rm -rf build/**/*.so\n   ```\n\n7. You can run the test images and install Detectron2 on Linux only using this command:\n   ```bash\n   # for CUDA 10.1:\n   python -m pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/index.html\n   ```\n\nNote: If you meet any issues, refer to [Detectron2 Common Installation Issues](https://github.com/facebookresearch/detectron2/blob/main/README.md#common-installation-issues) to find the appropriate solution."
    },
    {
        "question": "What are the main installation issues that occur when mismatches happen between the versions of Python, PyTorch, torchvision, and detectron2?",
        "answer": "The main installation issues when mismatches occur between the versions of Python, PyTorch, torchvision, and detectron2 include:\n    - 'Undefined torch/aten/caffe2 symbols', which may happen when detectron2 or torchvision is not compiled with the version of PyTorch you're running.\n    - 'Undefined C++ symbols (e.g., GLIBCXX) or C++ symbols not found', which usually occur because the library is compiled with a newer C++ compiler but run with an old C++ runtime.\n    - 'Not compiled with GPU support' or 'Detectron2 CUDA Compiler: not available', which happen when CUDA is not found when building detectron2.\n    - 'invalid device function' or 'no kernel image is available for execution', which can occur when using an unsupported or wrong CUDA version or device architecture.\n    - 'Undefined CUDA symbols', which usually happen when the version of NVCC is different from the version of CUDA you are running with."
    },
    {
        "question": "What are the common installation issues with detectron2, and what are the recommended solutions?",
        "answer": "The common installation issues with Detectron2 include:\n\n1. 'Undefined torch/aten/caffe2 symbols' or 'segmentation fault immediately when running the library'.\n   - Ensure that the versions of detectron2, torchvision, and PyTorch match.\n2. 'Undefined C++ symbols (e.g., GLIBCXX) or C++ symbols not found'.\n   - Try `conda update libgcc`. If the library was compiled with a newer C++ compiler, run the code with the proper C++ runtime.\n3. 'Not compiled with GPU support' or 'Detectron2 CUDA Compiler: not available'.\n   - Ensure that CUDA libraries are found. Most models can run inference without GPU support. Set `MODEL.DEVICE='cpu'` in the config.\n4. 'invalid device function' or 'no kernel image is available for execution'.\n   - Check whether you have mismatched CUDA versions or unsupported GPU architectures.\n5. 'Undefined CUDA symbols'; cannot open libcudart.so; other nvcc failures.\n   - The version of NVCC that you use to build detectron2 or torchvision does not match the version of CUDA. Check for inconsistent CUDA versions and ensure that PyTorch and CUDA are built for the same GPU architecture."
    }
]