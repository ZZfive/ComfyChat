[
    {
        "question": "What is ComfyUI?",
        "answer": "ComfyUI is a GUI that uses a stable diffusion model to generate images and videos. It allows users to run workflows on multiple GPUs or networked machines."
    },
    {
        "question": "What is ComfyUI_NetDist Plus used for?",
        "answer": "ComfyUI_NetDist Plus is used for running ComfyUI workflows on multiple local GPUs or networked machines and editing JSON values within comfyui."
    },
    {
        "question": "What are some of the credits mentioned for ComfyUI_NetDist Plus?",
        "answer": "The credits include [Comfyanonymous](https://github.com/comfyanonymous/ComfyUI), [City96](https://github.com/city96/ComfyUI_NetDist), [EventStationAI](https://www.eventstation.ai/), and others who provided nodes or code snippets used in its creation."
    },
    {
        "question": "What issues are mentioned in the document for ComfyUI_NetDist Plus?",
        "answer": "The issues mentioned include Remote Latents, Batched Base64 images, and Batch size issues for Style Transfer, although the document states that some of these are either existing nodes that should fix the issue or are notes that the author didn't take note of the errors."
    },
    {
        "question": "What examples are provided for remote conditioning workflow?",
        "answer": "The document provides examples for Remote Conditioning Workflow, Remote Batch Workflow, and Style Transfer Example, which use the ComfyUI_NetDist Plus functions to run workflows on different machines."
    },
    {
        "question": "What steps are mentioned for controlling a remote PC?",
        "answer": "The document advises adding `--listen` to the launch arguments and setting the correct remote IP for controlling a remote PC. It also notes that if you're running your second instance on a different PC, you'll likely need two different ComfyUI instances and vice versa."
    },
    {
        "question": "What is the purpose of the 'FetchRemote' node?",
        "answer": "The 'FetchRemote' node takes an image input from the remote instance and waits until the remote instance generates an image. The remote IP is set in the launch arguments or by opening a terminal window and checking with `ipconfig` on windows or `ip a` on linux."
    }
]