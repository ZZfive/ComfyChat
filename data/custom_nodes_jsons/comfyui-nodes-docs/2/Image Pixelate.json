[
    {
        "question": "WAS_Image_Pixelate节点的目的是什么？",
        "answer": "WAS_Image_Pixelate节点旨在将图像转换为像素化艺术风格。它通过减少图像中使用的颜色数量并应用各种像素化技术来实现这一点。"
    },
    {
        "question": "WAS_Image_Pixelate节点可以处理哪些参数？",
        "answer": "WAS_Image_Pixelate节点可以处理一系列参数以定制像素化过程，包括大小、颜色计数和抖动选项，从而为最终输出提供了高度的创意控制。"
    },
    {
        "question": "WAS_Image_Pixelate节点的必需输入类型是什么？",
        "answer": "WAS_Image_Pixelate节点的必需输入类型是图像，将由节点处理。这些图像将经历像素化转换，以创建风格化的像素化版本。"
    },
    {
        "question": "WAS_Image_Pixelate节点的可选输入类型有哪些？",
        "answer": "WAS_Image_Pixelate节点的可选输入类型包括：pixelation_size, num_colors, init_mode, max_iterations, dither, dither_mode, color_palettes, color_palette_mode, reverse_palette。"
    },
    {
        "question": "WAS_Image_Pixelate节点的输出类型是什么？",
        "answer": "WAS_Image_Pixelate节点的输出类型是使用指定参数处理后的像素化图像的结果。"
    },
    {
        "question": "WAS_Image_Pixelate节点如何实现颜色聚类？",
        "answer": "WAS_Image_Pixelate节点使用k-means聚类算法来确定像素化图像的颜色，该算法的初始化模式可以通过init_mode参数设置。"
    },
    {
        "question": "WAS_Image_Pixelate节点支持哪些抖动模式？",
        "answer": "WAS_Image_Pixelate节点支持FloydSteinberg和Ordered两种抖动模式，这些模式可以在启用抖动时通过dither_mode参数应用。"
    },
    {
        "question": "WAS_Image_Pixelate节点如何处理输入图像的大小？",
        "answer": "如果输入图像的宽度或高度大于设定的像素化大小（pixelation_size），WAS_Image_Pixelate节点会先将图像缩小到这个大小或更小，然后再执行像素化处理。处理完成后，图像会恢复到原来的尺寸。"
    }
]