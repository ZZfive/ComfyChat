[
    {
        "question": "What is the difference in box height and width calculation between Detectron and Detectron2?",
        "answer": "In Detectron2, the height and width of a box with corners (x1, y1) and (x2, y2) is computed as width = x2 - x1 and height = y2 - y1. In Detectron, a '+ 1' was added to both height and width."
    },
    {
        "question": "How does Detectron2's RPN differ from Detectron's RPN?",
        "answer": "In Detectron2, the RPN uses simpler anchors with fewer quantization artifacts. The anchors are center-aligned to feature grid points and not quantized, unlike in Detectron."
    },
    {
        "question": "What is the difference in class label ordering between Detectron and Detectron2?",
        "answer": "In Detectron2, integer labels [0, K-1] correspond to the K object categories and the label 'K' corresponds to the special 'background' category. In Detectron, label '0' means background, and labels [1, K] correspond to the K categories."
    },
    {
        "question": "How is ROIAlign implemented differently in Detectron2 compared to Detectron?",
        "answer": "In Detectron2, all the ROIs are shifted by half a pixel to create better image-feature-map alignment. Also, the ROIs are not required to have a minimum size of 1, leading to tiny differences in output."
    },
    {
        "question": "What is the difference in the mask inference function between Detectron and Detectron2?",
        "answer": "In Detectron2, the 'paste_mask' function is different and more accurate than in Detectron. This change can improve mask AP on COCO by ~0.5% absolute."
    },
    {
        "question": "What bug was fixed in Detectron2 regarding RPN.POST_NMS_TOPK_TRAIN?",
        "answer": "In Detectron2, a bug was fixed by making RPN.POST_NMS_TOPK_TRAIN per-image, rather than per-batch. This fix may lead to a small accuracy drop for a few models and require parameter tuning to match Detectron results."
    },
    {
        "question": "What is the default loss in bounding box regression in Detectron2?",
        "answer": "In Detectron2, for simplicity, the default loss in bounding box regression is changed to L1 loss, instead of smooth L1 loss used in Detectron."
    },
    {
        "question": "How are coordinates in COCO annotations interpreted in Detectron2?",
        "answer": "In Detectron2, the coordinates in COCO bounding box and segmentation annotations are interpreted as coordinates in range [0, width] or [0, height]. The coordinates in COCO keypoint annotations are interpreted as pixel indices in range [0, width - 1] or [0, height - 1]."
    }
]