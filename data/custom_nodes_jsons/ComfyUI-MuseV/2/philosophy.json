[
    {
        "question": "What is the purpose of Diffusers?",
        "answer": "Diffusers provides state-of-the-art pretrained diffusion models across multiple modalities and serves as a modular toolbox for both inference and training."
    },
    {
        "question": "What is the design philosophy of Diffusers regarding usability and performance?",
        "answer": "Diffusers prioritizes usability over performance. Models are loaded with the highest precision and lowest optimization by default to ensure usability across different platforms and accelerators without requiring complex installations."
    },
    {
        "question": "How does Diffusers handle the trade-off between simplicity and ease of use?",
        "answer": "Diffusers follows the principle of 'simple over easy'. It exposes complexity to the user instead of handling it magically, and prefers raising concise error messages over silently correcting erroneous input."
    },
    {
        "question": "What is the 'single-file policy' in Diffusers?",
        "answer": "The single-file policy means that almost all of the code of a certain class should be written in a single, self-contained file. This design principle is followed for both pipelines and schedulers in Diffusers."
    },
    {
        "question": "What are the three major classes that Diffusers consists of?",
        "answer": "Diffusers consists of three major classes: pipelines, models, and schedulers."
    },
    {
        "question": "How are pipelines designed in Diffusers?",
        "answer": "Pipelines in Diffusers are designed to be easy to use, readable, self-explanatory and easy to tweak. They are not intended to be feature-complete user interfaces."
    },
    {
        "question": "How are schedulers designed in Diffusers?",
        "answer": "Schedulers in Diffusers are designed as individual classes with loadable configuration files. They strongly follow the single-file policy and are not allowed to import from large utils files."
    }
]