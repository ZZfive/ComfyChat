[
    {
        "question": "What is the purpose of Diffusers?",
        "answer": "Diffusers provides state-of-the-art pretrained diffusion models across multiple modalities and serves as a modular toolbox for both inference and training."
    },
    {
        "question": "What is the design philosophy of Diffusers?",
        "answer": "Diffusers is built to be a natural extension of PyTorch and follows design principles such as usability over performance, simple over easy, and tweakable, contributor-friendly over abstraction."
    },
    {
        "question": "Why does Diffusers prefer simple and self-explainable code?",
        "answer": "Diffusers prefers simple and self-explainable code to make it easier for machine learning practitioners to quickly tweak existing code for ideation and research."
    },
    {
        "question": "What is the single-file policy in Diffusers?",
        "answer": "The single-file policy in Diffusers means that almost all of the code of a certain class should be written in a single, self-contained file."
    },
    {
        "question": "How are pipelines designed in Diffusers?",
        "answer": "Pipelines in Diffusers are designed to be easy to use, not feature complete, and should be seen as examples of how to use models and schedulers for inference."
    },
    {
        "question": "What are the three major classes in Diffusers?",
        "answer": "The three major classes in Diffusers are pipelines, models, and schedulers."
    },
    {
        "question": "How are schedulers designed in Diffusers?",
        "answer": "Schedulers in Diffusers are designed as individual classes with loadable configuration files and strongly follow the single-file policy."
    }
]