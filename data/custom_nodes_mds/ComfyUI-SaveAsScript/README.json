{
    "data": [
        {
            "question": "What is the main feature of ComfyUI-SaveAsScript (SaS)?",
            "answer": "The main feature of SaS is that it provides a more robust command-line interface and the ability to export your current workflow as a script directly from a button on the ComfyUI web interface."
        },
        {
            "question": "How can the output of a script file be modified in SaS?",
            "answer": "SaS allows the user to specify an `--output` option that can override the default path of `SaveImage` nodes. Additionally, if `-` is selected as the output path, the resultant image will be piped to stdout."
        },
        {
            "question": "Can scripts generated by SaS be imported as modules?",
            "answer": "Yes, scripts generated by SaS can be imported as modules. They can be imported using an `import` statement in Python, and then the `main()` function can be used to call the workflow programmatically."
        },
        {
            "question": "How can command-line arguments be passed to a script generated by SaS?",
            "answer": "SaS automatically converts any required input variable left unfilled in the ComfyUI workflow into an argument. These arguments can be passed as command-line arguments when running the generated script."
        },
        {
            "question": "Can the ComfyUI server be controlled via arguments?",
            "answer": "Yes, if you want to pass anything to the ComfyUI server as an argument, you can use `--` to indicate you're done with SaS arguments and are now passing ComfyUI arguments."
        },
        {
            "question": "What changes were introduced in ComfyUI-SaveAsScript compared to ComfyUI-To-Python-Extension?",
            "answer": "ComfyUI-SaveAsScript introduced new features such as Module Support, Custom Output Path, and the ability to pass command-line arguments. Bugfixes for Windows paths and certain Crystools nodes were made, and improvements in compatibility with module API are planned."
        },
        {
            "question": "What are potential use cases for ComfyUI-SaveAsScript?",
            "answer": "Potential use cases for ComfyUI-SaveAsScript include streamlining the process for creating a lean app or pipeline deployment, creating programmatic experiments, generating large queues for image generation, and easily expanding or iterating on an architecture."
        },
        {
            "question": "What version of ComfyUI-SaveAsScript has introduced support for custom nodes?",
            "answer": "ComfyUI-SaveAsScript V1.0.0 has introduced support for custom nodes."
        },
        {
            "question": "What is the procedure to use the SaS custom node?",
            "answer": "The user needs to install the custom_node (via git cloning or the Manager), click the button in the web UI or run the CLI, move the created .py file to the `ComfyUI` folder, and run the generated script."
        }
    ]
}